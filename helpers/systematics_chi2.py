
from math import sqrt

CCnueInc_recoNuE_noDet = {
  1:  (0.165007, 0, 400),
  2:  (0.135079, 400, 600),
  3:  (0.138727, 600, 800),
  4:  (0.142479, 800, 1000),
  5:  (0.147604, 1000, 1200),
  6:  (0.156053, 1200, 1400),
  7:  (0.151546, 1400, 1600),
  8:  (0.158931, 1600, 1800),
  9:  (0.164949, 1800, 6000)
}

CCnueInc_recoNuE_detvar = {
  1:  (0.123616, 0, 400),
  2:  (0.093613, 400, 600),
  3:  (0.054833, 600, 800),
  4:  (0.071288, 800, 1000),
  5:  (0.039865, 1000, 1200),
  6:  (0.076471, 1200, 1400),
  7:  (0.091423, 1400, 1600),
  8:  (0.190310, 1600, 1800),
  9:  (0.144353, 1800, 6000)
}

CCnumuInc_recoNuE_noDet = {
  1:  (0.2006382369967962,  0,    100),
  2:  (0.1688331256214487,  100,  200),
  3:  (0.14190381253341172, 200,  300),
  4:  (0.1410299292207514,  300,  400),
  5:  (0.13453670592879932, 400,  500),
  6:  (0.14831409448047111, 500,  600),
  7:  (0.14703440410424276, 600,  700),
  8:  (0.16493348337160468, 700,  800),
  9:  (0.16394398476878252, 800,  900),
  10: (0.17824939038004237, 900,  1000),
  11: (0.18255422054531917, 1000, 1100),
  12: (0.18593315102626304, 1100, 1200),
  13: (0.2019789337513537,  1200, 1300),
  14: (0.1938856019446503,  1300, 1400),
  15: (0.19289081192305627, 1400, 1500),
  16: (0.21769079989568502, 1500, 1600),
  17: (0.20061425353248324, 1600, 1700),
  18: (0.1917243622936701,  1700, 1800),
  19: (0.1963899364894271,  1800, 1900),
  20: (0.21682219177642362, 1900, 2000),
  21: (0.17564528692156936, 2000, 6000)
}

CCnumuInc_recoNuE_detvar = {
  1:  (0.171868, 0, 100),
  2:  (0.058173, 100, 200),
  3:  (0.043370, 200, 300),
  4:  (0.024423, 300, 400),
  5:  (0.059679, 400, 500),
  6:  (0.040625, 500, 600),
  7:  (0.042156, 600, 700),
  8:  (0.052031, 700, 800),
  9:  (0.075653, 800, 900),
  10:  (0.157159, 900, 1000),
  11:  (0.225639, 1000, 1100),
  12:  (0.127843, 1100, 1200),
  13:  (0.150389, 1200, 1300),
  14:  (0.181392, 1300, 1400),
  15:  (0.075954, 1400, 1500),
  16:  (0.075954, 1500, 1600),
  17:  (0.075954, 1600, 1700),
  18:  (0.075954, 1700, 1800),
  19:  (0.075954, 1800, 1900),
  20:  (0.075954, 1900, 2000),
  21:  (0.075954, 2000, 6000)
}

CCnueInc_cosTheta_noDet = {
  2:  (0.148630, -1.000000, 0.375000),
  3:  (0.149032, 0.375000, 0.500000),
  4:  (0.151603, 0.500000, 0.625000),
  5:  (0.146694, 0.625000, 0.750000),
  6:  (0.143464, 0.750000, 0.875000),
  7:  (0.153504, 0.875000, 1.000000)
}

CCnueInc_cosTheta_detvar = {
  2:  (0.047636, -1.000000, 0.375000),
  3:  (0.053873, 0.375000, 0.500000),
  4:  (0.061437, 0.500000, 0.625000),
  5:  (0.069275, 0.625000, 0.750000),
  6:  (0.059022, 0.750000, 0.875000),
  7:  (0.057228, 0.875000, 1.000000)
}

CCnumuInc_cosTheta_noDet = {
  2:  (0.170592, -1.000000, -0.875000),
  3:  (0.152605, -0.875000, -0.750000),
  4:  (0.166169, -0.750000, -0.625000),
  5:  (0.152165, -0.625000, -0.500000),
  6:  (0.162930, -0.500000, -0.375000),
  7:  (0.153171, -0.375000, -0.250000),
  8:  (0.148917, -0.250000, -0.125000),
  9:  (0.163208, -0.125000, 0.000000),
  10:  (0.150176, 0.000000, 0.125000),
  11:  (0.150490, 0.125000, 0.250000),
  12:  (0.143093, 0.250000, 0.375000),
  13:  (0.149412, 0.375000, 0.500000),
  14:  (0.137700, 0.500000, 0.625000),
  15:  (0.139011, 0.625000, 0.750000),
  16:  (0.152559, 0.750000, 0.875000),
  17:  (0.173502, 0.875000, 1.000000)
}

CCnumuInc_cosTheta_detvar = {
  2:  (0.156400, -1.000000, -0.875000),
  3:  (0.163295, -0.875000, -0.750000),
  4:  (0.114508, -0.750000, -0.625000),
  5:  (0.265420, -0.625000, -0.500000),
  6:  (0.208776, -0.500000, -0.375000),
  7:  (0.188055, -0.375000, -0.250000),
  8:  (0.075485, -0.250000, -0.125000),
  9:  (0.084721, -0.125000, 0.000000),
  10:  (0.064586, 0.000000, 0.125000),
  11:  (0.094345, 0.125000, 0.250000),
  12:  (0.055929, 0.250000, 0.375000),
  13:  (0.037093, 0.375000, 0.500000),
  14:  (0.047873, 0.500000, 0.625000),
  15:  (0.039442, 0.625000, 0.750000),
  16:  (0.039496, 0.750000, 0.875000),
  17:  (0.020693, 0.875000, 1.000000)
}

CCnueInc_lepP_noDet = {
  1:  (0.153490, 0, 200),
  2:  (0.138573, 200, 400),
  3:  (0.132041, 400, 600),
  4:  (0.142617, 600, 800),
  5:  (0.149346, 800, 1000),
  6:  (0.149516, 1000, 1200),
  7:  (0.151366, 1200, 1400),
  8:  (0.158260, 1400, 6000)
}

CCnueInc_lepP_detvar = {
  1:  (0.172280, 0, 200),
  2:  (0.096964, 200, 400),
  3:  (0.048278, 400, 600),
  4:  (0.051770, 600, 800),
  5:  (0.056286, 800, 1000),
  6:  (0.092455, 1000, 1200),
  7:  (0.127456, 1200, 1400),
  8:  (0.174478, 1400, 6000)
}

CCnumuInc_lepP_noDet = {
  1:  (0.140584, 0, 100),
  2:  (0.143859, 100, 200),
  3:  (0.138127, 200, 300),
  4:  (0.138094, 300, 400),
  5:  (0.144871, 400, 500),
  6:  (0.147821, 500, 600),
  7:  (0.162484, 600, 700),
  8:  (0.160375, 700, 800),
  9:  (0.178281, 800, 900),
  10:  (0.177482, 900, 1000),
  11:  (0.180178, 1000, 1100),
  12:  (0.187266, 1100, 1200),
  13:  (0.214595, 1200, 1300),
  14:  (0.188153, 1300, 1400),
  15:  (0.215904, 1400, 1500),
  16:  (0.235316, 1500, 1600),
  17:  (0.236377, 1600, 1700),
  18:  (0.207401, 1700, 1800),
  19:  (0.242235, 1800, 1900),
  20:  (0.224628, 1900, 2000),
  21:  (0.324812, 2000, 6000)
}

CCnumuInc_lepP_detvar = {
  1:  (0.195942, 0, 100),
  2:  (0.015788, 100, 200),
  3:  (0.013497, 200, 300),
  4:  (0.017370, 300, 400),
  5:  (0.026052, 400, 500),
  6:  (0.042298, 500, 600),
  7:  (0.050692, 600, 700),
  8:  (0.040569, 700, 800),
  9:  (0.056259, 800, 900),
  10:  (0.053300, 900, 1000),
  11:  (0.073723, 1000, 1100),
  12:  (0.135157, 1100, 1200),
  13:  (0.058060, 1200, 1300),
  14:  (0.058060, 1300, 1400),
  15:  (0.058060, 1400, 1500),
  16:  (0.058060, 1500, 1600),
  17:  (0.058060, 1600, 1700),
  18:  (0.058060, 1700, 1800),
  19:  (0.058060, 1800, 1900),
  20:  (0.058060, 1900, 2000),
  21:  (0.058060, 2000, 6000)
}


def getSys(sys1, sys2):
  sys = {}
  for key in sys1:
    sys[key] = (sqrt(sys1[key][0]**2 + sys2[key][0]**2), sys1[key][1], sys1[key][2])
  return sys


def SetUncertainties(h_pred, h_cos, var, sel):

  if sel not in ["CCnue","CCnumu"]:
    print("%s not a valid selection, only \"CCnue\" and \"CCnumu\" supported, plotting stats only error!"%sel)
    return h_pred
  if var == "recoNuE":
    if sel == "CCnue":
      sys = getSys(CCnueInc_recoNuE_noDet, CCnueInc_recoNuE_detvar)
    if sel == "CCnumu":
      sys = getSys(CCnumuInc_recoNuE_noDet, CCnumuInc_recoNuE_detvar)
  elif var == "cosTheta":
    if sel == "CCnue":
      sys = getSys(CCnueInc_cosTheta_noDet, CCnueInc_cosTheta_detvar)
    if sel == "CCnumu":
      sys = getSys(CCnumuInc_cosTheta_noDet, CCnumuInc_cosTheta_detvar)
  elif var == "lepP":
    if sel == "CCnue":
      sys = getSys(CCnueInc_lepP_noDet, CCnueInc_lepP_detvar)
    if sel == "CCnumu":
      sys = getSys(CCnumuInc_lepP_noDet, CCnumuInc_lepP_detvar)
  else:
    print("no systematics available for %s, plotting stats only error!"%var)
    return h_pred

  #TODO: add more detailed bin range check
  if (var == "cosTheta" and h_pred.GetNbinsX() != (len(sys)+2)) or (var != "cosTheta" and  h_pred.GetNbinsX() != len(sys)):
    print("for selection %s, variable %s number of bins in systematics calculation not equal to histo bin count, plotting stats only error!"%(sel, var))
    print("histo bin count: %i, sys bin count: %i"%(h_pred.GetNbinsX(), len(sys)))
    return h_pred

  print("adding systematics uncertainties for selection %s, variable %s"%(sel, var))

  for i in range(1, len(sys)+1, 1):
    if var == "cosTheta" and (i == 1 or i == h_pred.GetNbinsX()):
      h_pred.SetBinError(i, 0.)
      continue
    stats_err = h_pred.GetBinError(i)
    sys_err = (h_pred.GetBinContent(i) - h_cos.GetBinContent(i))*sys[i][0]
    tot_err = sqrt(stats_err**2 + sys_err**2)
    print("stats, sys, total, total2 errors for bin %i: %.2f, %.2f, %.2f"%(i,stats_err, sys_err, tot_err))
    h_pred.SetBinError(i, tot_err)
    
  return h_pred


