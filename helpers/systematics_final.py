
from math import sqrt

CCnueInc_recoNuE_noDet = {
  1:  (0.165007, 0, 400),
  2:  (0.135079, 400, 600),
  3:  (0.138727, 600, 800),
  4:  (0.142479, 800, 1000),
  5:  (0.147604, 1000, 1200),
  6:  (0.156053, 1200, 1400),
  7:  (0.151546, 1400, 1600),
  8:  (0.158931, 1600, 1800),
  9:  (0.164949, 1800, 6000)
}

CCnueInc_recoNuE_detvar = { 
  1:  (0.140786, 0, 400),
  2:  (0.110968, 400, 600),
  3:  (0.057446, 600, 800),
  4:  (0.061724, 800, 1000),
  5:  (0.103982, 1000, 1200),
  6:  (0.101497, 1200, 1400),
  7:  (0.085781, 1400, 1600),
  8:  (0.232140, 1600, 1800),
  9:  (0.178371, 1800, 6000)
}

CCnumuInc_recoNuE_noDet = {
  1:  (0.200638, 0, 100),
  2:  (0.168833, 100, 200),
  3:  (0.141904, 200, 300),
  4:  (0.141030, 300, 400),
  5:  (0.134537, 400, 500),
  6:  (0.148314, 500, 600),
  7:  (0.147034, 600, 700),
  8:  (0.164933, 700, 800),
  9:  (0.163944, 800, 900),
  10:  (0.178249, 900, 1000),
  11:  (0.182554, 1000, 1100),
  12:  (0.185933, 1100, 1200),
  13:  (0.201979, 1200, 1300),
  14:  (0.193886, 1300, 1400),
  15:  (0.192891, 1400, 1500),
  16:  (0.217691, 1500, 1600),
  17:  (0.200614, 1600, 1700),
  18:  (0.191724, 1700, 1800),
  19:  (0.167729, 1800, 6000)
}

CCnumuInc_recoNuE_detvar = {
  1:  (0.051019, 0, 100),
  2:  (0.027552, 100, 200),
  3:  (0.018892, 200, 300),
  4:  (0.018844, 300, 400),
  5:  (0.020452, 400, 500),
  6:  (0.015043, 500, 600),
  7:  (0.021307, 600, 700),
  8:  (0.019210, 700, 800),
  9:  (0.027819, 800, 900),
  10:  (0.038303, 900, 1000),
  11:  (0.057756, 1000, 1100),
  12:  (0.047054, 1100, 1200),
  13:  (0.051812, 1200, 1300),
  14:  (0.154476, 1300, 1400),
  15:  (0.087227, 1400, 1500),
  16:  (0.143548, 1500, 1600),
  17:  (0.108314, 1600, 1700),
  18:  (0.108939, 1700, 1800),
  19:  (0.091634, 1800, 6000)
}

CCnueInc_cosTheta_noDet = {
  2:  (0.148630, -1.000000, 0.375000),
  3:  (0.149032, 0.375000, 0.500000),
  4:  (0.151603, 0.500000, 0.625000),
  5:  (0.146694, 0.625000, 0.750000),
  6:  (0.143464, 0.750000, 0.875000),
  7:  (0.153504, 0.875000, 1.000000)
}

CCnueInc_cosTheta_detvar = {
  2:  (0.044526, -1.000000, 0.375000),
  3:  (0.174104, 0.375000, 0.500000),
  4:  (0.081246, 0.500000, 0.625000),
  5:  (0.050140, 0.625000, 0.750000),
  6:  (0.066486, 0.750000, 0.875000),
  7:  (0.032750, 0.875000, 1.000000)
}

CCnumuInc_cosTheta_noDet = {
  2:  (0.170592, -1.000000, -0.875000),
  3:  (0.152605, -0.875000, -0.750000),
  4:  (0.166169, -0.750000, -0.625000),
  5:  (0.152165, -0.625000, -0.500000),
  6:  (0.162930, -0.500000, -0.375000),
  7:  (0.153171, -0.375000, -0.250000),
  8:  (0.148917, -0.250000, -0.125000),
  9:  (0.163208, -0.125000, 0.000000),
  10:  (0.150176, 0.000000, 0.125000),
  11:  (0.150490, 0.125000, 0.250000),
  12:  (0.143093, 0.250000, 0.375000),
  13:  (0.149412, 0.375000, 0.500000),
  14:  (0.137700, 0.500000, 0.625000),
  15:  (0.139011, 0.625000, 0.750000),
  16:  (0.152559, 0.750000, 0.875000),
  17:  (0.173502, 0.875000, 1.000000)
}

CCnumuInc_cosTheta_detvar = {
  2:  (0.063912, -1.000000, -0.875000),
  3:  (0.063157, -0.875000, -0.750000),
  4:  (0.055583, -0.750000, -0.625000),
  5:  (0.059879, -0.625000, -0.500000),
  6:  (0.027479, -0.500000, -0.375000),
  7:  (0.011944, -0.375000, -0.250000),
  8:  (0.017516, -0.250000, -0.125000),
  9:  (0.047125, -0.125000, 0.000000),
  10:  (0.038107, 0.000000, 0.125000),
  11:  (0.034221, 0.125000, 0.250000),
  12:  (0.021375, 0.250000, 0.375000),
  13:  (0.014742, 0.375000, 0.500000),
  14:  (0.022762, 0.500000, 0.625000),
  15:  (0.008710, 0.625000, 0.750000),
  16:  (0.010529, 0.750000, 0.875000),
  17:  (0.013632, 0.875000, 1.000000)
}

CCnueInc_lepP_noDet = {
  1:  (0.153490, 0, 200),
  2:  (0.138573, 200, 400),
  3:  (0.132041, 400, 600),
  4:  (0.142617, 600, 800),
  5:  (0.149346, 800, 1000),
  6:  (0.149516, 1000, 1200),
  7:  (0.151366, 1200, 1400),
  8:  (0.158260, 1400, 6000)
}

CCnueInc_lepP_detvar = {
  1:  (0.233487, 0, 200),
  2:  (0.039357, 200, 400),
  3:  (0.043838, 400, 600),
  4:  (0.059430, 600, 800),
  5:  (0.047695, 800, 1000),
  6:  (0.134995, 1000, 1200),
  7:  (0.111329, 1200, 1400),
  8:  (0.169151, 1400, 6000)
}

CCnumuInc_lepP_noDet = {
  1:  (0.140584, 0, 100),
  2:  (0.143859, 100, 200),
  3:  (0.138127, 200, 300),
  4:  (0.138094, 300, 400),
  5:  (0.144871, 400, 500),
  6:  (0.147821, 500, 600),
  7:  (0.162484, 600, 700),
  8:  (0.160375, 700, 800),
  9:  (0.178281, 800, 900),
  10:  (0.177482, 900, 1000),
  11:  (0.180178, 1000, 1100),
  12:  (0.187266, 1100, 1200),
  13:  (0.214595, 1200, 1300),
  14:  (0.188153, 1300, 1400),
  15:  (0.215904, 1400, 1500),
  16:  (0.200776, 1500, 6000)
}

CCnumuInc_lepP_detvar = {
  1:  (0.045074, 0, 100),
  2:  (0.022079, 100, 200),
  3:  (0.014316, 200, 300),
  4:  (0.012780, 300, 400),
  5:  (0.010950, 400, 500),
  6:  (0.024097, 500, 600),
  7:  (0.017561, 600, 700),
  8:  (0.034953, 700, 800),
  9:  (0.017500, 800, 900),
  10:  (0.049137, 900, 1000),
  11:  (0.047346, 1000, 1100),
  12:  (0.043641, 1100, 1200),
  13:  (0.113853, 1200, 1300),
  14:  (0.071640, 1300, 1400),
  15:  (0.117726, 1400, 1500),
  16:  (0.088663, 1500, 6000)
}


def getSys(sys1, sys2):
  sys = {}
  for key in sys1:
    sys[key] = (sqrt(sys1[key][0]**2 + sys2[key][0]**2), sys1[key][1], sys1[key][2])
  return sys


def SetUncertainties(h_pred, h_cos, var, sel):

  if sel not in ["CCnue","CCnumu"]:
    print("%s not a valid selection, only \"CCnue\" and \"CCnumu\" supported, plotting stats only error!"%sel)
    return h_pred
  if var == "recoNuE":
    if sel == "CCnue":
      sys = getSys(CCnueInc_recoNuE_noDet, CCnueInc_recoNuE_detvar)
    if sel == "CCnumu":
      sys = getSys(CCnumuInc_recoNuE_noDet, CCnumuInc_recoNuE_detvar)
  elif var == "cosTheta":
    if sel == "CCnue":
      sys = getSys(CCnueInc_cosTheta_noDet, CCnueInc_cosTheta_detvar)
    if sel == "CCnumu":
      sys = getSys(CCnumuInc_cosTheta_noDet, CCnumuInc_cosTheta_detvar)
  elif var == "lepP":
    if sel == "CCnue":
      sys = getSys(CCnueInc_lepP_noDet, CCnueInc_lepP_detvar)
    if sel == "CCnumu":
      sys = getSys(CCnumuInc_lepP_noDet, CCnumuInc_lepP_detvar)
  else:
    print("no systematics available for %s, plotting stats only error!"%var)
    return h_pred

  #TODO: add more detailed bin range check
  if (var == "cosTheta" and h_pred.GetNbinsX() != (len(sys)+2)) or (var != "cosTheta" and  h_pred.GetNbinsX() != len(sys)):
    print("for selection %s, variable %s number of bins in systematics calculation not equal to histo bin count, plotting stats only error!"%(sel, var))
    print("histo bin count: %i, sys bin count: %i"%(h_pred.GetNbinsX(), len(sys)))
    return h_pred

  print("adding systematics uncertainties for selection %s, variable %s"%(sel, var))

  for i in range(1, len(sys)+1, 1):
    if var == "cosTheta" and (i == 1 or i == h_pred.GetNbinsX()):
      h_pred.SetBinError(i, 0.)
      continue
    stats_err = h_pred.GetBinError(i)
    sys_err = (h_pred.GetBinContent(i) - h_cos.GetBinContent(i))*sys[i][0]
    tot_err = sqrt(stats_err**2 + sys_err**2)
    print("stats, sys, total, total2 errors for bin %i: %.2f, %.2f, %.2f"%(i,stats_err, sys_err, tot_err))
    h_pred.SetBinError(i, tot_err)
    
  return h_pred


