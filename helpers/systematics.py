
from math import sqrt

CCnueInc_recoNuE_noDet = {
  1:  (0.20419348795344358, 0,    200),
  2:  (0.16270166588632198, 200,  400),
  3:  (0.13507890615510365, 400,  600),
  4:  (0.1387272640038089,  600,  800),
  5:  (0.1424787152580893,  800,  1000),
  6:  (0.14760382763631938, 1000, 1200),
  7:  (0.15605260148049288, 1200, 1400),
  8:  (0.15154633722007868, 1400, 1600),
  9:  (0.15893113706387335, 1600, 1800),
  10: (0.16363994629672654, 1800, 2000),
  11: (0.16377913426655064, 2000, 2200),
  12: (0.17522802582593777, 2200, 2400),
  13: (0.19594277255742099, 2400, 2600),
  14: (0.17968501940462772, 2600, 6000)
}

CCnueInc_recoNuE_cutSet1_noDet = {
  1:  (0.149864, 0, 200),
  2:  (0.138181, 200, 400),
  3:  (0.140005, 400, 600),
  4:  (0.152666, 600, 800),
  5:  (0.167203, 800, 1000),
  6:  (0.178872, 1000, 1200),
  7:  (0.186190, 1200, 1400),
  8:  (0.177643, 1400, 1600),
  9:  (0.181175, 1600, 1800),
  10:  (0.177982, 1800, 2000),
  11:  (0.224970, 2000, 2200),
  12:  (0.190574, 2200, 2400),
  13:  (0.195704, 2400, 2600),
  14:  (0.169236, 2600, 6000)
}
CCnueInc_recoNuE_cutSet2_noDet = {
  1:  (0.150474, 0, 200),
  2:  (0.138211, 200, 400),
  3:  (0.140004, 400, 600),
  4:  (0.152709, 600, 800),
  5:  (0.167255, 800, 1000),
  6:  (0.178804, 1000, 1200),
  7:  (0.186642, 1200, 1400),
  8:  (0.177371, 1400, 1600),
  9:  (0.181182, 1600, 1800),
  10:  (0.177984, 1800, 2000),
  11:  (0.224909, 2000, 2200),
  12:  (0.190541, 2200, 2400),
  13:  (0.195728, 2400, 2600),
  14:  (0.170309, 2600, 6000)
}

CCnueInc_recoNuE_cutSet3_noDet = {
  1:  (0.154046, 0, 200),
  2:  (0.164172, 200, 400),
  3:  (0.186751, 400, 600),
  4:  (0.195796, 600, 800),
  5:  (0.190726, 800, 1000),
  6:  (0.196377, 1000, 1200),
  7:  (0.180564, 1200, 1400),
  8:  (0.145966, 1400, 1600),
  9:  (0.151821, 1600, 1800),
  10:  (0.238918, 1800, 2000),
  11:  (0.182180, 2000, 2200),
  12:  (0.236935, 2200, 2400),
  13:  (0.223555, 2400, 2600),
  14:  (0.183815, 2600, 6000)
}

CCnueInc_recoNuE_cutSet4_noDet = {
  1:  (0.158254, 0, 200),
  2:  (0.152659, 200, 400),
  3:  (0.158446, 400, 600),
  4:  (0.168016, 600, 800),
  5:  (0.163727, 800, 1000),
  6:  (0.159811, 1000, 1200),
  7:  (0.147187, 1200, 1400),
  8:  (0.141628, 1400, 1600),
  9:  (0.151493, 1600, 1800),
  10:  (0.213483, 1800, 2000),
  11:  (0.175729, 2000, 2200),
  12:  (0.219880, 2200, 2400),
  13:  (0.189203, 2400, 2600),
  14:  (0.176053, 2600, 6000)
}

CCnueInc_recoNuE_cutSet5_noDet = {
  1:  (0.170009, 0, 200),
  2:  (0.153657, 200, 400),
  3:  (0.141168, 400, 600),
  4:  (0.142748, 600, 800),
  5:  (0.149494, 800, 1000),
  6:  (0.160847, 1000, 1200),
  7:  (0.170953, 1200, 1400),
  8:  (0.150727, 1400, 1600),
  9:  (0.160609, 1600, 1800),
  10:  (0.167459, 1800, 2000),
  11:  (0.149682, 2000, 2200),
  12:  (0.170553, 2200, 2400),
  13:  (0.188351, 2400, 2600),
  14:  (0.151979, 2600, 6000)
}

CCnueInc_recoNuE_cutSet6_noDet = {
  1:  (0.174808, 0, 200),
  2:  (0.153309, 200, 400),
  3:  (0.134784, 400, 600),
  4:  (0.142844, 600, 800),
  5:  (0.150400, 800, 1000),
  6:  (0.147369, 1000, 1200),
  7:  (0.172547, 1200, 1400),
  8:  (0.150556, 1400, 1600),
  9:  (0.159942, 1600, 1800),
  10:  (0.167350, 1800, 2000),
  11:  (0.152613, 2000, 2200),
  12:  (0.172822, 2200, 2400),
  13:  (0.189778, 2400, 2600),
  14:  (0.168125, 2600, 6000)
}

CCnumuInc_recoNuE_noDet = {
  1:  (0.2006382369967962,  0,    100),
  2:  (0.1688331256214487,  100,  200),
  3:  (0.14190381253341172, 200,  300),
  4:  (0.1410299292207514,  300,  400),
  5:  (0.13453670592879932, 400,  500),
  6:  (0.14831409448047111, 500,  600),
  7:  (0.14703440410424276, 600,  700),
  8:  (0.16493348337160468, 700,  800),
  9:  (0.16394398476878252, 800,  900),
  10: (0.17824939038004237, 900,  1000),
  11: (0.18255422054531917, 1000, 1100),
  12: (0.18593315102626304, 1100, 1200),
  13: (0.2019789337513537,  1200, 1300),
  14: (0.1938856019446503,  1300, 1400),
  15: (0.19289081192305627, 1400, 1500),
  16: (0.21769079989568502, 1500, 1600),
  17: (0.20061425353248324, 1600, 1700),
  18: (0.1917243622936701,  1700, 1800),
  19: (0.1963899364894271,  1800, 1900),
  20: (0.21682219177642362, 1900, 2000),
  21: (0.17564528692156936, 2000, 6000)
}

CCnueInc_cosTheta_noDet = {
  2:  (0.179843, -1.000000, -0.875000),
  3:  (0.163184, -0.875000, -0.750000),
  4:  (0.167309, -0.750000, -0.625000),
  5:  (0.161840, -0.625000, -0.500000),
  6:  (0.186310, -0.500000, -0.375000),
  7:  (0.152551, -0.375000, -0.250000),
  8:  (0.155019, -0.250000, -0.125000),
  9:  (0.154762, -0.125000, 0.000000),
  10:  (0.148617, 0.000000, 0.125000),
  11:  (0.158277, 0.125000, 0.250000),
  12:  (0.139723, 0.250000, 0.375000),
  13:  (0.149032, 0.375000, 0.500000),
  14:  (0.151603, 0.500000, 0.625000),
  15:  (0.146694, 0.625000, 0.750000),
  16:  (0.143464, 0.750000, 0.875000),
  17:  (0.153504, 0.875000, 1.000000)
}

CCnumuInc_cosTheta_noDet = {
  2:  (0.170592, -1.000000, -0.875000),
  3:  (0.152605, -0.875000, -0.750000),
  4:  (0.166169, -0.750000, -0.625000),
  5:  (0.152165, -0.625000, -0.500000),
  6:  (0.162930, -0.500000, -0.375000),
  7:  (0.153171, -0.375000, -0.250000),
  8:  (0.148917, -0.250000, -0.125000),
  9:  (0.163208, -0.125000, 0.000000),
  10:  (0.150176, 0.000000, 0.125000),
  11:  (0.150490, 0.125000, 0.250000),
  12:  (0.143093, 0.250000, 0.375000),
  13:  (0.149412, 0.375000, 0.500000),
  14:  (0.137700, 0.500000, 0.625000),
  15:  (0.139011, 0.625000, 0.750000),
  16:  (0.152559, 0.750000, 0.875000),
  17:  (0.173502, 0.875000, 1.000000)
}

CCnueInc_lepP_noDet = {
  1:  (0.153490, 0, 200),
  2:  (0.138573, 200, 400),
  3:  (0.132041, 400, 600),
  4:  (0.142617, 600, 800),
  5:  (0.149346, 800, 1000),
  6:  (0.149516, 1000, 1200),
  7:  (0.151366, 1200, 1400),
  8:  (0.155612, 1400, 1600),
  9:  (0.159759, 1600, 1800),
  10:  (0.182183, 1800, 2000),
  11:  (0.161082, 2000, 2200),
  12:  (0.183302, 2200, 2400),
  13:  (0.209718, 2400, 2600),
  14:  (0.194549, 2600, 6000)
}

CCnumuInc_lepP_noDet = {
  1:  (0.140584, 0, 100),
  2:  (0.143859, 100, 200),
  3:  (0.138127, 200, 300),
  4:  (0.138094, 300, 400),
  5:  (0.144871, 400, 500),
  6:  (0.147821, 500, 600),
  7:  (0.162484, 600, 700),
  8:  (0.160375, 700, 800),
  9:  (0.178281, 800, 900),
  10:  (0.177482, 900, 1000),
  11:  (0.180178, 1000, 1100),
  12:  (0.187266, 1100, 1200),
  13:  (0.214595, 1200, 1300),
  14:  (0.188153, 1300, 1400),
  15:  (0.215904, 1400, 1500),
  16:  (0.235316, 1500, 1600),
  17:  (0.236377, 1600, 1700),
  18:  (0.207401, 1700, 1800),
  19:  (0.242235, 1800, 1900),
  20:  (0.224628, 1900, 2000),
  21:  (0.324812, 2000, 6000)
}


def SetUncertainties(h_pred, var, sel):

  if sel not in ["CCnue","CCnumu"]:
    print("%s not a valid selection, only \"CCnue\" and \"CCnumu\" supported, plotting stats only error!"%sel)
    return h_pred
  if var == "recoNuE":
    if sel == "CCnue":
      sys = CCnueInc_recoNuE_noDet
    if sel == "CCnumu":
      sys = CCnumuInc_recoNuE_noDet
  elif var == "recoNuE_cutSet1" and sel == "CCnue":
    sys = CCnueInc_recoNuE_cutSet1_noDet
  elif var == "recoNuE_cutSet2" and sel == "CCnue":
    sys = CCnueInc_recoNuE_cutSet2_noDet
  elif var == "recoNuE_cutSet3" and sel == "CCnue":
    sys = CCnueInc_recoNuE_cutSet3_noDet
  elif var == "recoNuE_cutSet4" and sel == "CCnue":
    sys = CCnueInc_recoNuE_cutSet4_noDet
  elif var == "recoNuE_cutSet5" and sel == "CCnue":
    sys = CCnueInc_recoNuE_cutSet5_noDet
  elif var == "recoNuE_cutSet6" and sel == "CCnue":
    sys = CCnueInc_recoNuE_cutSet6_noDet
  elif var == "cosTheta":
    if sel == "CCnue":
      sys = CCnueInc_cosTheta_noDet
    if sel == "CCnumu":
      sys = CCnumuInc_cosTheta_noDet
  elif var == "lepP":
    if sel == "CCnue":
      sys = CCnueInc_lepP_noDet
    if sel == "CCnumu":
      sys = CCnumuInc_lepP_noDet
  else:
    print("no systematics available for %s, plotting stats only error!"%var)
    return h_pred

  #TODO: add more detailed bin range check
  if (var == "cosTheta" and h_pred.GetNbinsX() != (len(sys)+2)) or (var != "cosTheta" and  h_pred.GetNbinsX() != len(sys)):
    print("for selection %s, variable %s number of bins in systematics calculation not equal to histo bin count, plotting stats only error!"%(sel, var))
    print("histo bin count: %i, sys bin count: %i"%(h_pred.GetNbinsX(), len(sys)))
    return h_pred

  print("adding systematics uncertainties for selection %s, variable %s"%(sel, var))

  for i in range(1, len(sys)+1, 1):
    if var == "cosTheta" and (i == 1 or i == h_pred.GetNbinsX()):
      h_pred.SetBinError(i, 0.)
      continue
    stats_err = h_pred.GetBinError(i)
    sys_err = h_pred.GetBinContent(i)*sys[i][0]
    tot_err = sqrt(stats_err**2 + sys_err**2)
    print("stats, sys, total errors for bin %i: %.2f, %.2f, %.2f"%(i,stats_err, sys_err, tot_err))
    h_pred.SetBinError(i, tot_err)
    
  return h_pred


